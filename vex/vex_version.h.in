#ifndef VEX_VERSION_H
#define VEX_VERSION_H

/**
 * VEX_MAJOR_VERSION:
 *
 * The major version (1, if %VEX_VERSION is 1.2.3)
 */
#define VEX_MAJOR_VERSION    @VEX_MAJOR_VERSION@

/**
 * VEX_MINOR_VERSION:
 *
 * The minor version (2, if %VEX_VERSION is 1.2.3)
 */
#define VEX_MINOR_VERSION    @VEX_MINOR_VERSION@

/**
 * VEX_MICRO_VERSION:
 *
 * The micro version (3, if %VEX_VERSION is 1.2.3)
 */
#define VEX_MICRO_VERSION    @VEX_MICRO_VERSION@

/**
 * VEX_VERSION:
 *
 * The full version, like 1.2.3
 */
#define VEX_VERSION          @VEX_VERSION@

/**
 * VEX_VERSION_S:
 *
 * The full version, in string form (suited for string
 * concatenation)
 */
#define VEX_VERSION_S       "@VEX_VERSION@"

/**
 * VEX_VERSION_HEX:
 *
 * Numerically encoded version, like 0x01020300
 */
#define VEX_VERSION_HEX     ((VEX_MAJOR_VERSION << 24) | \
                            (VEX_MINOR_VERSION << 16) | \
                            (VEX_MICRO_VERSION << 8))

/**
 * VEX_CHECK_VERSION:
 * @major: major version, like 1 in 1.2.3
 * @minor: minor version, like 2 in 1.2.3
 * @micro: micro version, like 3 in 1.2.3
 *
 * Evaluates to %TRUE if the version of VA-API is greater than
 * @major, @minor and @micro
 */
#define VEX_CHECK_VERSION(major,minor,micro) \
        (VEX_MAJOR_VERSION > (major) || \
         (VEX_MAJOR_VERSION == (major) && VEX_MINOR_VERSION > (minor)) || \
         (VEX_MAJOR_VERSION == (major) && VEX_MINOR_VERSION == (minor) && VEX_MICRO_VERSION >= (micro)))

#endif /* VEX_VERSION_H */
